import pandas as pd
from pytorch_forecasting import TimeSeriesDataSet, TemporalFusionTransformer

# Define el símbolo de la empresa para la que deseas descargar datos
symbol = 'AAPL'

# Define el rango de fechas que deseas descargar
start_date = '2022-01-01'
end_date = '2022-03-31'

# Descarga los datos de la API de Alpha Vantage y los convierte en un DataFrame de pandas
url = f'https://www.alphavantage.co/query?function=TIME_SERIES_DAILY_ADJUSTED&symbol={symbol}&outputsize=compact&apikey=588A7VF9GZ37XYPY'
df = pd.read_json(url)['Time Series (Daily)']
df = pd.DataFrame.from_dict(df, orient='index')
df = df.iloc[::-1]
df.index = pd.to_datetime(df.index)

# Limita los datos descargados al rango de fechas deseado
df = df.loc[start_date:end_date]

# Crea el conjunto de datos para el modelo TFT
# La variable target es el precio de cierre 'Close'
# Utilizamos los últimos 5 días como input y predecimos el siguiente día
# Creamos una ventana de entrenamiento deslizante de 5 días
training_data = TimeSeriesDataSet(
    df,
    time_idx="date",
    target="Close",
    group_ids=["symbol"],
    min_encoder_length=5,
    max_encoder_length=5,
    min_prediction_length=1,
    max_prediction_length=1,
    static_categoricals=["symbol"],
    time_varying_unknown_reals=["Close"],
    time_varying_known_categoricals=["day_of_week"],
    time_varying_known_reals=["High", "Low", "Open", "Volume"],
    add_relative_time_idx=True,
    add_target_scales=True,
    add_encoder_length=True,
)

# Creamos el modelo TFT con 2 capas de LSTM y 2 capas de Linear
# Utilizamos una learning rate de 0.01 y un batch size de 32
model = TemporalFusionTransformer.from_dataset(
    training_data,
    learning_rate=0.01,
    hidden_size=32,
    attention_head_size=1,
    dropout=0.1,
    output_size=7,  # forecasting horizon
    loss=SMAPELoss(),
    reduce_on_plateau_patience=4,
)
trainer = pl.Trainer(gpus=0, max_epochs=10, gradient_clip_val=0.1)
trainer.fit(model, train_dataloader=training_data.to_dataloader(train=True, batch_size=32, num_workers=0))

# Calculamos la predicción y el intervalo de confianza del 95%
# Utilizamos el método predict_quantiles para obtener las franjas de confianza
new_prediction_dataset = training_data.to_prediction_dataset(
    training_data[-5:],
    add_relative_time_idx=True,
    add_encoder_length=True,
)
predictions = model.predict(new_prediction_dataset)
forecast = predictions.quantiles.detach().numpy()[0]
y_pred = forecast[-1]
y_lower = forecast[-1, 0.025]
y_upper =res.predict(pd.DataFrame({'x': x_pred}), exog={'x': x_pred}, quantile=0.975)

# Imprimimos la predicción y el intervalo de confianza
print(f'Predicción: {y_pred}')
print(f'Intervalo de confianza del 95%: ({y_lower}, {y_upper})')

